(async function () {
  async function axiom_log(payload) {
    const version = "0.0.1";
    payload["version"] = version;
    var data = JSON.stringify(payload);

    fetch("/logs", {
      method: "POST",
      body: data,
    })
      .then(function (res) {
        return res.json();
      })
      .then(function (data) {
        console.log(JSON.stringify(data));
      });
  }

  await axiom_log({ msg: "app initialized!!" });
  console.log("app initialized!!")

  const proxy_host = "{ProxyHost}";
  const target_host = "{TargetHost}";
  const target_url = "{TargetUrl}";

  // Helper function to extract original URL from proxied URL
  function getOriginalUrl(url) {
    try {
      const proxyPath = new URL(proxy_host).pathname;
      const urlObj = new URL(url);
      const pathAfterProxy = urlObj.pathname.substring(proxyPath.length);
      
      // If the path after proxy starts with http(s):, it's a proxied URL
      if (pathAfterProxy.match(/^\/https?:/)) {
        return pathAfterProxy.substring(1); // Remove leading slash
      }
      return url;
    } catch (e) {
      console.error('Failed to extract original URL:', e);
      return url;
    }
  }

  // Helper function to check if a URL is already proxied
  function isProxiedUrl(url) {
    try {
      const urlObj = new URL(url);
      const proxyUrlObj = new URL(proxy_host);
      
      // Check if the URL is already going through our proxy
      if (urlObj.origin === proxyUrlObj.origin && 
          urlObj.pathname.startsWith(proxyUrlObj.pathname + '/http')) {
        return true;
      }
      return false;
    } catch (e) {
      return false;
    }
  }

  // Helper function to check if an element should be skipped
  function shouldSkipElement(element) {
    // Skip processing for certain element types or classes
    const skipClasses = ['screen-shader', 'shaded-scrollbars'];
    const skipTags = ['SCREEN-SHADER'];
    
    if (skipTags.includes(element.tagName)) return true;
    if (element.classList) {
      for (const cls of skipClasses) {
        if (element.classList.contains(cls)) return true;
      }
    }
    return false;
  }

  // Helper function to rewrite URLs
  function rewriteUrl(url) {
    if (!url || url.startsWith('/logs')) return url; // Don't proxy logging requests or empty URLs
    if (isProxiedUrl(url)) return url; // Don't proxy already-proxied URLs
    if (url.startsWith('about:') || url.startsWith('data:') || url.startsWith('blob:')) return url;
    
    try {
      // Remove any trailing slash from proxy_host
      const cleanProxyHost = proxy_host.replace(/\/$/, '');
      
      // Get the original target URL from current location
      const originalPageUrl = getOriginalUrl(window.location.href);
      
      let absoluteUrl;
      if (url.startsWith('http://') || url.startsWith('https://')) {
        // If it's already an absolute URL, use it as is
        absoluteUrl = url;
      } else if (url.startsWith('/')) {
        // For root-relative paths (/abc), resolve against the root of original host
        const originalUrlObj = new URL(originalPageUrl);
        absoluteUrl = `${originalUrlObj.protocol}//${originalUrlObj.host}${url}`;
      } else {
        // For relative paths (./abc or ../abc), resolve against the original page URL
        absoluteUrl = new URL(url, originalPageUrl).href;
      }
      
      // Only proxy if not already proxied
      return isProxiedUrl(absoluteUrl) ? absoluteUrl : `${cleanProxyHost}/${absoluteUrl}`;
    } catch (e) {
      console.error('URL rewrite failed:', e);
      return url;
    }
  }

  // Intercept fetch
  const originalFetch = window.fetch;
  window.fetch = async function (...args) {
    let [resource, config] = args;
    console.log("[Fetch Intercepted]", resource, config);

    if (resource !== '/logs') {
      // Rewrite the URL
      const newUrl = rewriteUrl(resource);
      
      // Modify config
      const newConfig = {
        ...(config || {}),
        headers: {
          ...(config?.headers || {}),
          "X-Forwarded-Host": target_host,
          "X-Original-URL": resource,
        },
        referrer: target_host,
      };

      await axiom_log({ 
        event: "Fetch Intercepted",
        originalUrl: resource,
        newUrl: newUrl,
        config: newConfig
      });

      return originalFetch(newUrl, newConfig);
    }

    return originalFetch(resource, config);
  };

  // Intercept XMLHttpRequest
  const originalOpen = XMLHttpRequest.prototype.open;
  const originalSend = XMLHttpRequest.prototype.send;

  XMLHttpRequest.prototype.open = function (method, url, ...rest) {
    this._interceptedUrl = url;
    this._originalUrl = url;
    
    if (url !== '/logs') {
      // Rewrite the URL for XHR requests
      const newUrl = rewriteUrl(url);
      this._interceptedUrl = newUrl;
      
      console.log("[XHR Open Intercepted]", method, url, "->", newUrl);
      
      axiom_log({ 
        event: "XHR Open Intercepted",
        method: method,
        originalUrl: url,
        newUrl: newUrl
      });
      
      return originalOpen.call(this, method, newUrl, ...rest);
    }
    
    return originalOpen.call(this, method, url, ...rest);
  };

  XMLHttpRequest.prototype.send = function (body) {
    console.log("[XHR Send Intercepted]", this._interceptedUrl, body);

    if (this._originalUrl !== '/logs') {
      // Add proxy-related headers
      this.setRequestHeader("X-Forwarded-Host", target_host);
      this.setRequestHeader("X-Original-URL", this._originalUrl);
      
      axiom_log({ 
        event: "XHR Send Intercepted",
        originalUrl: this._originalUrl,
        newUrl: this._interceptedUrl
      });
    }

    return originalSend.call(this, body);
  };

  // Handle jQuery if present
  if (window.jQuery) {
    const originalAjax = $.ajax;
    $.ajax = function (options) {
      if (options.url !== '/logs') {
        const newUrl = rewriteUrl(options.url);
        console.log("[jQuery.ajax intercepted]", options.url, "->", newUrl);
        options.url = newUrl;
        
        // Add proxy-related headers
        options.headers = {
          ...(options.headers || {}),
          "X-Forwarded-Host": target_host,
          "X-Original-URL": options.url,
        };
      }
      return originalAjax.call(this, options);
    };
  }

  // Handle dynamic jQuery loading
  Object.defineProperty(window, "jQuery", {
    configurable: true,
    set(value) {
      delete window.jQuery;
      window.jQuery = value;

      const originalAjax = value.ajax;
      value.ajax = function (options) {
        if (options.url !== '/logs') {
          const newUrl = rewriteUrl(options.url);
          console.log("[Patched $.ajax]", options.url, "->", newUrl);
          options.url = newUrl;
          
          // Add proxy-related headers
          options.headers = {
            ...(options.headers || {}),
            "X-Forwarded-Host": target_host,
            "X-Original-URL": options.url,
          };
        }
        return originalAjax.call(this, options);
      };
    },
  });
})();

